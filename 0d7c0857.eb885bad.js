/*! For license information please see 0d7c0857.eb885bad.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{102:function(e,t,n){"use strict";function r(e){var t,n,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(a&&(a+=" "),a+=n);else for(t in e)e[t]&&(a&&(a+=" "),a+=t);return a}t.a=function(){for(var e,t,n=0,a="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(a&&(a+=" "),a+=t);return a}},103:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return h}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(n),b=r,h=d["".concat(o,".").concat(b)]||d[b]||p[b]||i;return n?a.a.createElement(h,s(s({ref:t},l),{},{components:n})):a.a.createElement(h,s({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},104:function(e,t,n){"use strict";e.exports=n(105)},105:function(e,t,n){"use strict";var r=n(106),a="function"==typeof Symbol&&Symbol.for,i=a?Symbol.for("react.element"):60103,o=a?Symbol.for("react.portal"):60106,s=a?Symbol.for("react.fragment"):60107,c=a?Symbol.for("react.strict_mode"):60108,l=a?Symbol.for("react.profiler"):60114,u=a?Symbol.for("react.provider"):60109,d=a?Symbol.for("react.context"):60110,p=a?Symbol.for("react.forward_ref"):60112,b=a?Symbol.for("react.suspense"):60113,h=a?Symbol.for("react.memo"):60115,f=a?Symbol.for("react.lazy"):60116,m="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var j={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function O(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||j}function v(){}function k(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||j}O.prototype.isReactComponent={},O.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},O.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=O.prototype;var w=k.prototype=new v;w.constructor=k,r(w,O.prototype),w.isPureReactComponent=!0;var N={current:null},C=Object.prototype.hasOwnProperty,I={key:!0,ref:!0,__self:!0,__source:!0};function A(e,t,n){var r,a={},o=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(o=""+t.key),t)C.call(t,r)&&!I.hasOwnProperty(r)&&(a[r]=t[r]);var c=arguments.length-2;if(1===c)a.children=n;else if(1<c){for(var l=Array(c),u=0;u<c;u++)l[u]=arguments[u+2];a.children=l}if(e&&e.defaultProps)for(r in c=e.defaultProps)void 0===a[r]&&(a[r]=c[r]);return{$$typeof:i,type:e,key:o,ref:s,props:a,_owner:N.current}}function T(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var S=/\/+/g,x=[];function R(e,t,n,r){if(x.length){var a=x.pop();return a.result=e,a.keyPrefix=t,a.func=n,a.context=r,a.count=0,a}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function U(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>x.length&&x.push(e)}function E(e,t,n,r){var a=typeof e;"undefined"!==a&&"boolean"!==a||(e=null);var s=!1;if(null===e)s=!0;else switch(a){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case i:case o:s=!0}}if(s)return n(r,e,""===t?"."+q(e,0):t),1;if(s=0,t=""===t?".":t+":",Array.isArray(e))for(var c=0;c<e.length;c++){var l=t+q(a=e[c],c);s+=E(a,l,n,r)}else if(null===e||"object"!=typeof e?l=null:l="function"==typeof(l=m&&e[m]||e["@@iterator"])?l:null,"function"==typeof l)for(e=l.call(e),c=0;!(a=e.next()).done;)s+=E(a=a.value,l=t+q(a,c++),n,r);else if("object"===a)throw n=""+e,Error(y(31,"[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n,""));return s}function P(e,t,n){return null==e?0:E(e,"",t,n)}function q(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function B(e,t){e.func.call(e.context,t,e.count++)}function V(e,t,n){var r=e.result,a=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?_(e,r,n,(function(e){return e})):null!=e&&(T(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,a+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(S,"$&/")+"/")+n)),r.push(e))}function _(e,t,n,r,a){var i="";null!=n&&(i=(""+n).replace(S,"$&/")+"/"),P(e,V,t=R(t,i,r,a)),U(t)}var D={current:null};function $(){var e=D.current;if(null===e)throw Error(y(321));return e}var W={ReactCurrentDispatcher:D,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:N,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return _(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;P(e,B,t=R(null,null,t,n)),U(t)},count:function(e){return P(e,(function(){return null}),null)},toArray:function(e){var t=[];return _(e,t,null,(function(e){return e})),t},only:function(e){if(!T(e))throw Error(y(143));return e}},t.Component=O,t.Fragment=s,t.Profiler=l,t.PureComponent=k,t.StrictMode=c,t.Suspense=b,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W,t.cloneElement=function(e,t,n){if(null==e)throw Error(y(267,e));var a=r({},e.props),o=e.key,s=e.ref,c=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,c=N.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(u in t)C.call(t,u)&&!I.hasOwnProperty(u)&&(a[u]=void 0===t[u]&&void 0!==l?l[u]:t[u])}var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){l=Array(u);for(var d=0;d<u;d++)l[d]=arguments[d+2];a.children=l}return{$$typeof:i,type:e.type,key:o,ref:s,props:a,_owner:c}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:d,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:u,_context:e},e.Consumer=e},t.createElement=A,t.createFactory=function(e){var t=A.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:p,render:e}},t.isValidElement=T,t.lazy=function(e){return{$$typeof:f,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return $().useCallback(e,t)},t.useContext=function(e,t){return $().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return $().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return $().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return $().useLayoutEffect(e,t)},t.useMemo=function(e,t){return $().useMemo(e,t)},t.useReducer=function(e,t,n){return $().useReducer(e,t,n)},t.useRef=function(e){return $().useRef(e)},t.useState=function(e){return $().useState(e)},t.version="16.14.0"},106:function(e,t,n){"use strict";var r=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(a){return!1}}()?Object.assign:function(e,t){for(var n,s,c=o(e),l=1;l<arguments.length;l++){for(var u in n=Object(arguments[l]))a.call(n,u)&&(c[u]=n[u]);if(r){s=r(n);for(var d=0;d<s.length;d++)i.call(n,s[d])&&(c[s[d]]=n[s[d]])}}return c}},107:function(e,t,n){"use strict";var r=n(0),a=n(108);t.a=function(){var e=Object(r.useContext)(a.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},108:function(e,t,n){"use strict";var r=n(0),a=Object(r.createContext)(void 0);t.a=a},109:function(e,t,n){"use strict";var r=n(0),a=n.n(r);t.a=function(e){var t=e.children,n=e.hidden,r=e.className;return a.a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},110:function(e,t,n){"use strict";var r=n(0),a=n.n(r),i=n(107),o=n(102),s=n(56),c=n.n(s),l=37,u=39;t.a=function(e){var t=e.lazy,n=e.block,s=e.defaultValue,d=e.values,p=e.groupId,b=e.className,h=Object(i.a)(),f=h.tabGroupChoices,m=h.setTabGroupChoices,y=Object(r.useState)(s),j=y[0],g=y[1],O=r.Children.toArray(e.children);if(null!=p){var v=f[p];null!=v&&v!==j&&d.some((function(e){return e.value===v}))&&g(v)}var k=function(e){g(e),null!=p&&m(p,e)},w=[];return a.a.createElement("div",null,a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(o.a)("tabs",{"tabs--block":n},b)},d.map((function(e){var t=e.value,n=e.label;return a.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":j===t,className:Object(o.a)("tabs__item",c.a.tabItem,{"tabs__item--active":j===t}),key:t,ref:function(e){return w.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case u:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case l:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(w,e.target,e)},onFocus:function(){return k(t)},onClick:function(){k(t)}},n)}))),t?Object(r.cloneElement)(O.filter((function(e){return e.props.value===j}))[0],{className:"margin-vert--md"}):a.a.createElement("div",{className:"margin-vert--md"},O.map((function(e,t){return Object(r.cloneElement)(e,{key:t,hidden:e.props.value!==j})}))))}},67:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return u})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(7),i=(n(104),n(103)),o=n(109),s=n(110),c={id:"createAsyncThunk",title:"createAsyncThunk",sidebar_label:"createAsyncThunk",hide_title:!0},l={unversionedId:"api/createAsyncThunk",id:"api/createAsyncThunk",isDocsHomePage:!1,title:"createAsyncThunk",description:"createAsyncThunk",source:"@site/../docs/api/createAsyncThunk.mdx",slug:"/api/createAsyncThunk",permalink:"/api/createAsyncThunk",version:"current",sidebar_label:"createAsyncThunk",sidebar:"docs",previous:{title:"createSlice",permalink:"/api/createSlice"},next:{title:"createEntityAdapter",permalink:"/api/createEntityAdapter"}},u=[{value:"Overview",id:"overview",children:[]},{value:"Parameters",id:"parameters",children:[{value:"<code>type</code>",id:"type",children:[]},{value:"<code>payloadCreator</code>",id:"payloadcreator",children:[]},{value:"Options",id:"options",children:[]}]},{value:"Return Value",id:"return-value",children:[]},{value:"Promise Lifecycle Actions",id:"promise-lifecycle-actions",children:[]},{value:"Handling Thunk Results",id:"handling-thunk-results",children:[{value:"Unwrapping Result Actions",id:"unwrapping-result-actions",children:[]},{value:"Checking Errors After Dispatching",id:"checking-errors-after-dispatching",children:[]}]},{value:"Handling Thunk Errors",id:"handling-thunk-errors",children:[]},{value:"Cancellation",id:"cancellation",children:[{value:"Canceling Before Execution",id:"canceling-before-execution",children:[]},{value:"Canceling While Running",id:"canceling-while-running",children:[]},{value:"Checking Cancellation Status",id:"checking-cancellation-status",children:[]},{value:"Reading the Signal Value",id:"reading-the-signal-value",children:[]}]},{value:"Examples",id:"examples",children:[]}],d={toc:u};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"createasyncthunk"},Object(i.b)("inlineCode",{parentName:"h1"},"createAsyncThunk")),Object(i.b)("h2",{id:"overview"},"Overview"),Object(i.b)("p",null,"A function that accepts a Redux action type string and a callback function that should return a promise. It generates promise lifecycle action types based on the action type prefix that you pass in, and returns a thunk action creator that will run the promise callback and dispatch the lifecycle actions based on the returned promise."),Object(i.b)("p",null,"This abstracts the standard recommended approach for handling async request lifecycles."),Object(i.b)("p",null,"It does not generate any reducer functions, since it does not know what data you're fetching, how you want to track loading state, or how the data you return needs to be processed. You should write your own reducer logic that handles these actions, with whatever loading state and processing logic is appropriate for your own app."),Object(i.b)("p",null,"Sample usage:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js",metastring:"{5-11,22-25,30}","{5-11,22-25,30}":!0},"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { userAPI } from './userAPI'\n\n// First, create the thunk\nconst fetchUserById = createAsyncThunk(\n  'users/fetchByIdStatus',\n  async (userId, thunkAPI) => {\n    const response = await userAPI.fetchById(userId)\n    return response.data\n  }\n)\n\n// Then, handle actions in your reducers:\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: { entities: [], loading: 'idle' },\n  reducers: {\n    // standard reducer logic, with auto-generated action types per reducer\n  },\n  extraReducers: {\n    // Add reducers for additional action types here, and handle loading state as needed\n    [fetchUserById.fulfilled]: (state, action) => {\n      // Add user to the state array\n      state.entities.push(action.payload)\n    }\n  }\n})\n\n// Later, dispatch the thunk as needed in the app\ndispatch(fetchUserById(123))\n")),Object(i.b)("h2",{id:"parameters"},"Parameters"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"createAsyncThunk")," accepts three parameters: a string action ",Object(i.b)("inlineCode",{parentName:"p"},"type")," value, a ",Object(i.b)("inlineCode",{parentName:"p"},"payloadCreator")," callback, and an ",Object(i.b)("inlineCode",{parentName:"p"},"options")," object."),Object(i.b)("h3",{id:"type"},Object(i.b)("inlineCode",{parentName:"h3"},"type")),Object(i.b)("p",null,"A string that will be used to generate additional Redux action type constants, representing the lifecycle of an async request:"),Object(i.b)("p",null,"For example, a ",Object(i.b)("inlineCode",{parentName:"p"},"type")," argument of ",Object(i.b)("inlineCode",{parentName:"p"},"'users/requestStatus'")," will generate these action types:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"pending"),": ",Object(i.b)("inlineCode",{parentName:"li"},"'users/requestStatus/pending'")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"fulfilled"),": ",Object(i.b)("inlineCode",{parentName:"li"},"'users/requestStatus/fulfilled'")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rejected"),": ",Object(i.b)("inlineCode",{parentName:"li"},"'users/requestStatus/rejected'"))),Object(i.b)("h3",{id:"payloadcreator"},Object(i.b)("inlineCode",{parentName:"h3"},"payloadCreator")),Object(i.b)("p",null,"A callback function that should return a promise containing the result of some asynchronous logic. It may also return a value synchronously. If there is an error, it should either return a rejected promise containing an ",Object(i.b)("inlineCode",{parentName:"p"},"Error")," instance or a plain value such as a descriptive error message or otherwise a resolved promise with a ",Object(i.b)("inlineCode",{parentName:"p"},"RejectWithValue")," argument as returned by the ",Object(i.b)("inlineCode",{parentName:"p"},"thunkAPI.rejectWithValue")," function."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"payloadCreator")," function can contain whatever logic you need to calculate an appropriate result. This could include a standard AJAX data fetch request, multiple AJAX calls with the results combined into a final value, interactions with React Native ",Object(i.b)("inlineCode",{parentName:"p"},"AsyncStorage"),", and so on."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"payloadCreator")," function will be called with two arguments:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"arg"),": a single value, containing the first parameter that was passed to the thunk action creator when it was dispatched. This is useful for passing in values like item IDs that may be needed as part of the request. If you need to pass in multiple values, pass them together in an object when you dispatch the thunk, like ",Object(i.b)("inlineCode",{parentName:"li"},"dispatch(fetchUsers({status: 'active', sortBy: 'name'}))"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"thunkAPI"),": an object containing all of the parameters that are normally passed to a Redux thunk function, as well as additional options:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dispatch"),": the Redux store ",Object(i.b)("inlineCode",{parentName:"li"},"dispatch")," method"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"getState"),": the Redux store ",Object(i.b)("inlineCode",{parentName:"li"},"getState")," method"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"extra"),': the "extra argument" given to the thunk middleware on setup, if available'),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"requestId"),": a unique string ID value that was automatically generated to identify this request sequence"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"signal"),": an ",Object(i.b)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal"},Object(i.b)("inlineCode",{parentName:"a"},"AbortController.signal")," object")," that may be used to see if another part of the app logic has marked this request as needing cancelation."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rejectWithValue"),": rejectWithValue is a utility function that you can ",Object(i.b)("inlineCode",{parentName:"li"},"return")," in your action creator to return a rejected response with a defined payload. It will pass whatever value you give it and return it in the payload of the rejected action.")))),Object(i.b)("p",null,"The logic in the ",Object(i.b)("inlineCode",{parentName:"p"},"payloadCreator")," function may use any of these values as needed to calculate the result."),Object(i.b)("h3",{id:"options"},"Options"),Object(i.b)("p",null,"An object with the following optional fields:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"condition"),": a callback that can be used to skip execution of the payload creator and all action dispatches, if desired. See ",Object(i.b)("a",{parentName:"li",href:"#canceling-before-execution"},"Canceling Before Execution")," for a complete description."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dispatchConditionRejection"),": if ",Object(i.b)("inlineCode",{parentName:"li"},"condition()")," returns ",Object(i.b)("inlineCode",{parentName:"li"},"false"),', the default behavior is that no actions will be dispatched at all. If you still want a "rejected" action to be dispatched when the thunk was canceled, set this flag to ',Object(i.b)("inlineCode",{parentName:"li"},"true"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"idGenerator"),": a function to use when generating the ",Object(i.b)("inlineCode",{parentName:"li"},"requestId")," for the request sequence. Defaults to use ",Object(i.b)("a",{parentName:"li",href:"/api/other-exports/#nanoid"},"nanoid"),".")),Object(i.b)("h2",{id:"return-value"},"Return Value"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"createAsyncThunk")," returns a standard Redux thunk action creator. The thunk action creator function will have plain action creators for the ",Object(i.b)("inlineCode",{parentName:"p"},"pending"),", ",Object(i.b)("inlineCode",{parentName:"p"},"fulfilled"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"rejected")," cases attached as nested fields."),Object(i.b)("p",null,"Using the ",Object(i.b)("inlineCode",{parentName:"p"},"fetchUserById")," example above, ",Object(i.b)("inlineCode",{parentName:"p"},"createAsyncThunk")," will generate four functions:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"fetchUserById"),", the thunk action creator that kicks off the async payload callback you wrote",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"fetchUserById.pending"),", an action creator that dispatches an ",Object(i.b)("inlineCode",{parentName:"li"},"'users/fetchByIdStatus/pending'")," action"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"fetchUserById.fulfilled"),", an action creator that dispatches an ",Object(i.b)("inlineCode",{parentName:"li"},"'users/fetchByIdStatus/fulfilled'")," action"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"fetchUserById.rejected"),", an action creator that dispatches an ",Object(i.b)("inlineCode",{parentName:"li"},"'users/fetchByIdStatus/rejected'")," action")))),Object(i.b)("p",null,"When dispatched, the thunk will:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"dispatch the ",Object(i.b)("inlineCode",{parentName:"li"},"pending")," action"),Object(i.b)("li",{parentName:"ul"},"call the ",Object(i.b)("inlineCode",{parentName:"li"},"payloadCreator")," callback and wait for the returned promise to settle"),Object(i.b)("li",{parentName:"ul"},"when the promise settles:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"if the promise resolved successfully, dispatch the ",Object(i.b)("inlineCode",{parentName:"li"},"fulfilled")," action with the promise value as ",Object(i.b)("inlineCode",{parentName:"li"},"action.payload")),Object(i.b)("li",{parentName:"ul"},"if the promise resolved with a ",Object(i.b)("inlineCode",{parentName:"li"},"rejectWithValue(value)")," return value, dispatch the ",Object(i.b)("inlineCode",{parentName:"li"},"rejected")," action with the value passed into ",Object(i.b)("inlineCode",{parentName:"li"},"action.payload")," and 'Rejected' as ",Object(i.b)("inlineCode",{parentName:"li"},"action.error.message")),Object(i.b)("li",{parentName:"ul"},"if the promise failed and was not handled with ",Object(i.b)("inlineCode",{parentName:"li"},"rejectWithValue"),", dispatch the ",Object(i.b)("inlineCode",{parentName:"li"},"rejected")," action with a serialized version of the error value as ",Object(i.b)("inlineCode",{parentName:"li"},"action.error")))),Object(i.b)("li",{parentName:"ul"},"Return a fulfilled promise containing the final dispatched action (either the ",Object(i.b)("inlineCode",{parentName:"li"},"fulfilled")," or ",Object(i.b)("inlineCode",{parentName:"li"},"rejected")," action object)")),Object(i.b)("h2",{id:"promise-lifecycle-actions"},"Promise Lifecycle Actions"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"createAsyncThunk")," will generate three Redux action creators using ",Object(i.b)("a",{parentName:"p",href:"/api/createAction"},Object(i.b)("inlineCode",{parentName:"a"},"createAction")),": ",Object(i.b)("inlineCode",{parentName:"p"},"pending"),", ",Object(i.b)("inlineCode",{parentName:"p"},"fulfilled"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"rejected"),". Each lifecycle action creator will be attached to the returned thunk action creator so that your reducer logic can reference the action types and respond to the actions when dispatched. Each action object will contain the current unique ",Object(i.b)("inlineCode",{parentName:"p"},"requestId")," and ",Object(i.b)("inlineCode",{parentName:"p"},"arg")," values under ",Object(i.b)("inlineCode",{parentName:"p"},"action.meta"),"."),Object(i.b)("p",null,"The action creators will have these signatures:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts",metastring:"no-transpile","no-transpile":!0},"interface SerializedError {\n  name?: string\n  message?: string\n  code?: string\n  stack?: string\n}\n\ninterface PendingAction<ThunkArg> {\n  type: string\n  payload: undefined\n  meta: {\n    requestId: string\n    arg: ThunkArg\n  }\n}\n\ninterface FulfilledAction<ThunkArg, PromiseResult> {\n  type: string\n  payload: PromiseResult\n  meta: {\n    requestId: string\n    arg: ThunkArg\n  }\n}\n\ninterface RejectedAction<ThunkArg> {\n  type: string\n  payload: undefined\n  error: SerializedError | any\n  meta: {\n    requestId: string\n    arg: ThunkArg\n    aborted: boolean\n    condition: boolean\n  }\n}\n\ninterface RejectedWithValueAction<ThunkArg, RejectedValue> {\n  type: string\n  payload: RejectedValue\n  error: { message: 'Rejected' }\n  meta: {\n    requestId: string\n    arg: ThunkArg\n    aborted: boolean\n  }\n}\n\ntype Pending = <ThunkArg>(\n  requestId: string,\n  arg: ThunkArg\n) => PendingAction<ThunkArg>\n\ntype Fulfilled = <ThunkArg, PromiseResult>(\n  payload: PromiseResult,\n  requestId: string,\n  arg: ThunkArg\n) => FulfilledAction<ThunkArg, PromiseResult>\n\ntype Rejected = <ThunkArg>(\n  requestId: string,\n  arg: ThunkArg\n) => RejectedAction<ThunkArg>\n\ntype RejectedWithValue = <ThunkArg, RejectedValue>(\n  requestId: string,\n  arg: ThunkArg\n) => RejectedWithValueAction<ThunkArg, RejectedValue>\n")),Object(i.b)("p",null,"To handle these actions in your reducers, reference the action creators in ",Object(i.b)("inlineCode",{parentName:"p"},"createReducer")," or ",Object(i.b)("inlineCode",{parentName:"p"},"createSlice"),' using either the object key notation or the "builder callback" notation. (Note that if you use TypeScript, you ',Object(i.b)("a",{parentName:"p",href:"/usage/usage-with-typescript#type-safety-with-extrareducers"},'should use the "builder callback" notation to ensure the types are inferred correctly'),"):"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js",metastring:"{2,6,14,23}","{2,6,14,23}":!0},"const reducer1 = createReducer(initialState, {\n  [fetchUserById.fulfilled]: (state, action) => {}\n})\n\nconst reducer2 = createReducer(initialState, builder => {\n  builder.addCase(fetchUserById.fulfilled, (state, action) => {})\n})\n\nconst reducer3 = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchUserById.fulfilled]: (state, action) => {}\n  }\n})\n\nconst reducer4 = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchUserById.fulfilled, (state, action) => {})\n  }\n})\n")),Object(i.b)("h2",{id:"handling-thunk-results"},"Handling Thunk Results"),Object(i.b)("h3",{id:"unwrapping-result-actions"},"Unwrapping Result Actions"),Object(i.b)("p",null,"Thunks may return a value when dispatched. A common use case is to return a promise from the thunk, dispatch the thunk from a component, and then wait for the promise to resolve before doing additional work:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const onClick = () => {\n  dispatch(fetchUserById(userId)).then(() => {\n    // do additional work\n  })\n}\n")),Object(i.b)("p",null,"The thunks generated by ",Object(i.b)("inlineCode",{parentName:"p"},"createAsyncThunk")," ",Object(i.b)("strong",{parentName:"p"},"will always return a resolved promise")," with either the ",Object(i.b)("inlineCode",{parentName:"p"},"fulfilled")," action object or ",Object(i.b)("inlineCode",{parentName:"p"},"rejected")," action object inside, as appropriate."),Object(i.b)("p",null,"The calling logic may wish to treat these actions as if they were the original promise contents. Redux Toolkit exports an ",Object(i.b)("inlineCode",{parentName:"p"},"unwrapResult")," function that can be used to extract the ",Object(i.b)("inlineCode",{parentName:"p"},"payload")," of a ",Object(i.b)("inlineCode",{parentName:"p"},"fulfilled")," action or to throw either the ",Object(i.b)("inlineCode",{parentName:"p"},"error")," or, if available, ",Object(i.b)("inlineCode",{parentName:"p"},"payload")," created by ",Object(i.b)("inlineCode",{parentName:"p"},"rejectWithValue")," from a ",Object(i.b)("inlineCode",{parentName:"p"},"rejected")," action:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { unwrapResult } from '@reduxjs/toolkit'\n\n// in the component\nconst onClick = () => {\n  dispatch(fetchUserById(userId))\n    .then(unwrapResult)\n    .then(originalPromiseResult => {})\n    .catch(rejectedValueOrSerializedError => {})\n}\n")),Object(i.b)("h3",{id:"checking-errors-after-dispatching"},"Checking Errors After Dispatching"),Object(i.b)("p",null,"Note that this means ",Object(i.b)("strong",{parentName:"p"},"a failed request or error in a thunk will ",Object(i.b)("em",{parentName:"strong"},"never")," return a ",Object(i.b)("em",{parentName:"strong"},"rejected")," promise"),". We assume that any failure is more of a handled error than an unhandled exception at this point. This is due to the fact that we want to prevent uncaught promise rejections for those who do not use the result of ",Object(i.b)("inlineCode",{parentName:"p"},"dispatch"),"."),Object(i.b)("p",null,"If your component needs to know if the request failed, use ",Object(i.b)("inlineCode",{parentName:"p"},"unwrapResult")," and handle the re-thrown error accordingly."),Object(i.b)("h2",{id:"handling-thunk-errors"},"Handling Thunk Errors"),Object(i.b)("p",null,"When your ",Object(i.b)("inlineCode",{parentName:"p"},"payloadCreator")," returns a rejected promise (such as a thrown error in an ",Object(i.b)("inlineCode",{parentName:"p"},"async")," function), the thunk will dispatch a ",Object(i.b)("inlineCode",{parentName:"p"},"rejected")," action containing an automatically-serialized version of the error as ",Object(i.b)("inlineCode",{parentName:"p"},"action.error"),". However, to ensure serializability, everything that does not match the ",Object(i.b)("inlineCode",{parentName:"p"},"SerializedError")," interface will have been removed from it:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts",metastring:"no-transpile","no-transpile":!0},"export interface SerializedError {\n  name?: string\n  message?: string\n  stack?: string\n  code?: string\n}\n")),Object(i.b)("p",null,"If you need to customize the contents of the ",Object(i.b)("inlineCode",{parentName:"p"},"rejected")," action, you should catch any errors yourself, and then ",Object(i.b)("strong",{parentName:"p"},"return")," a new value using the ",Object(i.b)("inlineCode",{parentName:"p"},"thunkAPI.rejectWithValue")," utility. Doing ",Object(i.b)("inlineCode",{parentName:"p"},"return rejectWithValue(errorPayload)")," will cause the ",Object(i.b)("inlineCode",{parentName:"p"},"rejected")," action to use that value as ",Object(i.b)("inlineCode",{parentName:"p"},"action.payload"),"."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"rejectWithValue"),' approach should also be used if your API response "succeeds", but contains some kind of additional error details that the reducer should know about. This is particularly common when expecting field-level validation errors from an API.'),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const updateUser = createAsyncThunk(\n  'users/update',\n  async (userData, { rejectWithValue }) => {\n    const { id, ...fields } = userData\n    try {\n      const response = await userAPI.updateById(id, fields)\n      return response.data.user\n    } catch (err) {\n      // Use `err.response.data` as `action.payload` for a `rejected` action,\n      // by explicitly returning it using the `rejectWithValue()` utility\n      return rejectWithValue(err.response.data)\n    }\n  }\n)\n")),Object(i.b)("h2",{id:"cancellation"},"Cancellation"),Object(i.b)("h3",{id:"canceling-before-execution"},"Canceling Before Execution"),Object(i.b)("p",null,"If you need to cancel a thunk before the payload creator is called, you may provide a ",Object(i.b)("inlineCode",{parentName:"p"},"condition")," callback as an option after the payload creator. The callback will receive the thunk argument and an object with ",Object(i.b)("inlineCode",{parentName:"p"},"{getState, extra}")," as parameters, and use those to decide whether to continue or not. If the execution should be canceled, the ",Object(i.b)("inlineCode",{parentName:"p"},"condition")," callback should return a literal ",Object(i.b)("inlineCode",{parentName:"p"},"false")," value:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"const fetchUserById = createAsyncThunk(\n  'users/fetchByIdStatus',\n  async (userId, thunkAPI) => {\n    const response = await userAPI.fetchById(userId)\n    return response.data\n  },\n  {\n    condition: (userId, { getState, extra }) => {\n      const { users } = getState()\n      const fetchStatus = users.requests[userId]\n      if (fetchStatus === 'fulfilled' || fetchStatus === 'loading') {\n        // Already fetched or in progress, don't need to re-fetch\n        return false\n      }\n    }\n  }\n)\n")),Object(i.b)("p",null,"If ",Object(i.b)("inlineCode",{parentName:"p"},"condition()")," returns ",Object(i.b)("inlineCode",{parentName:"p"},"false"),', the default behavior is that no actions will be dispatched at all. If you still want a "rejected" action to be dispatched when the thunk was canceled, pass in ',Object(i.b)("inlineCode",{parentName:"p"},"{condition, dispatchConditionRejection: true}"),"."),Object(i.b)("h3",{id:"canceling-while-running"},"Canceling While Running"),Object(i.b)("p",null,"If you want to cancel your running thunk before it has finished, you can use the ",Object(i.b)("inlineCode",{parentName:"p"},"abort")," method of the promise returned by ",Object(i.b)("inlineCode",{parentName:"p"},"dispatch(fetchUserById(userId))"),"."),Object(i.b)("p",null,"A real-life example of that would look like this:"),Object(i.b)(s.a,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"ts",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"import { fetchUserById } from './slice'\nimport { useAppDispatch } from './store'\nimport React from 'react'\n\nfunction MyComponent(props: { userId: string }) {\n  const dispatch = useAppDispatch()\n  React.useEffect(() => {\n    // Dispatching the thunk returns a promise\n    const promise = dispatch(fetchUserById(props.userId))\n    return () => {\n      // `createAsyncThunk` attaches an `abort()` method to the promise\n      promise.abort()\n    }\n  }, [props.userId])\n}\n"))),Object(i.b)(o.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { fetchUserById } from './slice'\nimport { useAppDispatch } from './store'\nimport React from 'react'\n\nfunction MyComponent(props) {\n  const dispatch = useAppDispatch()\n  React.useEffect(() => {\n    // Dispatching the thunk returns a promise\n    const promise = dispatch(fetchUserById(props.userId))\n    return () => {\n      // `createAsyncThunk` attaches an `abort()` method to the promise\n      promise.abort()\n    }\n  }, [props.userId])\n}\n")))),Object(i.b)("p",null,"After a thunk has been cancelled this way, it will dispatch (and return) a ",Object(i.b)("inlineCode",{parentName:"p"},'"thunkName/rejected"')," action with an ",Object(i.b)("inlineCode",{parentName:"p"},"AbortError")," on the ",Object(i.b)("inlineCode",{parentName:"p"},"error")," property. The thunk will not dispatch any further actions."),Object(i.b)("p",null,"Additionally, your ",Object(i.b)("inlineCode",{parentName:"p"},"payloadCreator")," can use the ",Object(i.b)("inlineCode",{parentName:"p"},"AbortSignal")," it is passed via ",Object(i.b)("inlineCode",{parentName:"p"},"thunkAPI.signal")," to actually cancel a costly asynchronous action."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"fetch")," api of modern browsers already comes with support for an ",Object(i.b)("inlineCode",{parentName:"p"},"AbortSignal"),":"),Object(i.b)(s.a,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"ts",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"import { createAsyncThunk } from '@reduxjs/toolkit'\n\nconst fetchUserById = createAsyncThunk(\n  'users/fetchById',\n  async (userId: string, thunkAPI) => {\n    const response = await fetch(`https://reqres.in/api/users/${userId}`, {\n      signal: thunkAPI.signal,\n    })\n    return await response.json()\n  }\n)\n"))),Object(i.b)(o.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { createAsyncThunk } from '@reduxjs/toolkit'\n\nconst fetchUserById = createAsyncThunk(\n  'users/fetchById',\n  async (userId, thunkAPI) => {\n    const response = await fetch(`https://reqres.in/api/users/${userId}`, {\n      signal: thunkAPI.signal,\n    })\n    return await response.json()\n  }\n)\n")))),Object(i.b)("h3",{id:"checking-cancellation-status"},"Checking Cancellation Status"),Object(i.b)("h3",{id:"reading-the-signal-value"},"Reading the Signal Value"),Object(i.b)("p",null,"You can use the ",Object(i.b)("inlineCode",{parentName:"p"},"signal.aborted")," property to regularly check if the thunk has been aborted and in that case stop costly long-running work:"),Object(i.b)(s.a,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"ts",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"import { createAsyncThunk } from '@reduxjs/toolkit'\n\nconst readStream = createAsyncThunk(\n  'readStream',\n  async (stream: ReadableStream, { signal }) => {\n    const reader = stream.getReader()\n\n    let done = false\n    let result = ''\n\n    while (!done) {\n      if (signal.aborted) {\n        throw new Error('stop the work, this has been aborted!')\n      }\n      const read = await reader.read()\n      result += read.value\n      done = read.done\n    }\n    return result\n  }\n)\n"))),Object(i.b)(o.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { createAsyncThunk } from '@reduxjs/toolkit'\n\nconst readStream = createAsyncThunk(\n  'readStream',\n  async (stream, { signal }) => {\n    const reader = stream.getReader()\n\n    let done = false\n    let result = ''\n\n    while (!done) {\n      if (signal.aborted) {\n        throw new Error('stop the work, this has been aborted!')\n      }\n      const read = await reader.read()\n      result += read.value\n      done = read.done\n    }\n    return result\n  }\n)\n")))),Object(i.b)("h4",{id:"listening-for-abort-events"},"Listening for Abort Events"),Object(i.b)("p",null,"You can also call ",Object(i.b)("inlineCode",{parentName:"p"},"signal.addEventListener('abort', callback)")," to have logic inside the thunk be notified when ",Object(i.b)("inlineCode",{parentName:"p"},"promise.abort()")," was called.\nThis can for example be used in conjunction with an axios ",Object(i.b)("inlineCode",{parentName:"p"},"CancelToken"),":"),Object(i.b)(s.a,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"ts",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"import { createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\n\nconst fetchUserById = createAsyncThunk(\n  'users/fetchById',\n  async (userId, { signal }) => {\n    const source = axios.CancelToken.source()\n    signal.addEventListener('abort', () => {\n      source.cancel()\n    })\n    const response = await axios.get(`https://reqres.in/api/users/${userId}`, {\n      cancelToken: source.token,\n    })\n    return response.data\n  }\n)\n"))),Object(i.b)(o.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { createAsyncThunk } from '@reduxjs/toolkit'\nimport axios from 'axios'\n\nconst fetchUserById = createAsyncThunk(\n  'users/fetchById',\n  async (userId, { signal }) => {\n    const source = axios.CancelToken.source()\n    signal.addEventListener('abort', () => {\n      source.cancel()\n    })\n    const response = await axios.get(`https://reqres.in/api/users/${userId}`, {\n      cancelToken: source.token,\n    })\n    return response.data\n  }\n)\n")))),Object(i.b)("h2",{id:"examples"},"Examples"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Requesting a user by ID, with loading state, and only one request at a time:")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { createAsyncThunk, createSlice, unwrapResult } from '@reduxjs/toolkit'\nimport { userAPI } from './userAPI'\n\nconst fetchUserById = createAsyncThunk(\n  'users/fetchByIdStatus',\n  async (userId, { getState, requestId }) => {\n    const { currentRequestId, loading } = getState().users\n    if (loading !== 'pending' || requestId !== currentRequestId) {\n      return\n    }\n    const response = await userAPI.fetchById(userId)\n    return response.data\n  }\n)\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    entities: [],\n    loading: 'idle',\n    currentRequestId: undefined,\n    error: null\n  },\n  reducers: {},\n  extraReducers: {\n    [fetchUserById.pending]: (state, action) => {\n      if (state.loading === 'idle') {\n        state.loading = 'pending'\n        state.currentRequestId = action.meta.requestId\n      }\n    },\n    [fetchUserById.fulfilled]: (state, action) => {\n      const { requestId } = action.meta\n      if (state.loading === 'pending' && state.currentRequestId === requestId) {\n        state.loading = 'idle'\n        state.entities.push(action.payload)\n        state.currentRequestId = undefined\n      }\n    },\n    [fetchUserById.rejected]: (state, action) => {\n      const { requestId } = action.meta\n      if (state.loading === 'pending' && state.currentRequestId === requestId) {\n        state.loading = 'idle'\n        state.error = action.error\n        state.currentRequestId = undefined\n      }\n    }\n  }\n})\n\nconst UsersComponent = () => {\n  const { users, loading, error } = useSelector(state => state.users)\n  const dispatch = useDispatch()\n\n  const fetchOneUser = async userId => {\n    try {\n      const resultAction = await dispatch(fetchUserById(userId))\n      const user = unwrapResult(resultAction)\n      showToast('success', `Fetched ${user.name}`)\n    } catch (err) {\n      showToast('error', `Fetch failed: ${err.message}`)\n    }\n  }\n\n  // render UI here\n}\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Using rejectWithValue to access a custom rejected payload in a component"),Object(i.b)("p",{parentName:"li"},Object(i.b)("em",{parentName:"p"},"Note: this is a contrived example assuming our userAPI only ever throws validation-specific errors")))),Object(i.b)(s.a,{groupId:"language",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"ts",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"// file: user/slice.ts\nimport { createAsyncThunk, createSlice, unwrapResult } from '@reduxjs/toolkit'\nimport { userAPI } from './userAPI'\nimport { AxiosError } from 'axios'\n\n// Sample types that will be used\nexport interface User {\n  id: string\n  first_name: string\n  last_name: string\n  email: string\n}\n\ninterface ValidationErrors {\n  errorMessage: string\n  field_errors: Record<string, string>\n}\n\ninterface UpdateUserResponse {\n  user: User\n  success: boolean\n}\n\nexport const updateUser = createAsyncThunk<\n  User,\n  { id: string } & Partial<User>,\n  {\n    rejectValue: ValidationErrors\n  }\n>('users/update', async (userData, { rejectWithValue }) => {\n  try {\n    const { id, ...fields } = userData\n    const response = await userAPI.updateById<UpdateUserResponse>(id, fields)\n    return response.data.user\n  } catch (err) {\n    let error: AxiosError<ValidationErrors> = err // cast the error for access\n    if (!error.response) {\n      throw err\n    }\n    // We got validation errors, let's return those so we can reference in our component and set form errors\n    return rejectWithValue(error.response.data)\n  }\n})\n\ninterface UsersState {\n  error: string | null | undefined\n  entities: Record<string, User>\n}\n\nconst initialState = {\n  entities: {},\n  error: null,\n} as UsersState\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    // The `builder` callback form is used here because it provides correctly typed reducers from the action creators\n    builder.addCase(updateUser.fulfilled, (state, { payload }) => {\n      state.entities[payload.id] = payload\n    })\n    builder.addCase(updateUser.rejected, (state, action) => {\n      if (action.payload) {\n        // Being that we passed in ValidationErrors to rejectType in `createAsyncThunk`, the payload will be available here.\n        state.error = action.payload.errorMessage\n      } else {\n        state.error = action.error.message\n      }\n    })\n  },\n})\n\nexport default usersSlice.reducer\n\n\n// file: user/UsersComponent.ts\nimport React from 'react'\nimport { useAppDispatch, RootState } from '../store'\nimport { useSelector } from 'react-redux'\nimport { User, updateUser } from './slice'\nimport { FormikHelpers } from 'formik'\nimport { showToast } from 'some-toast-library'\n\ninterface FormValues extends Omit<User, 'id'> {}\n\nconst UsersComponent = (props: { id: string }) => {\n  const { entities, error } = useSelector((state: RootState) => state.users)\n  const dispatch = useAppDispatch()\n\n  // This is an example of an onSubmit handler using Formik meant to demonstrate accessing the payload of the rejected action\n  const handleUpdateUser = async (\n    values: FormValues,\n    formikHelpers: FormikHelpers<FormValues>\n  ) => {\n    const resultAction = await dispatch(updateUser({ id: props.id, ...values }))\n    if (updateUser.fulfilled.match(resultAction)) {\n      // user will have a type signature of User as we passed that as the Returned parameter in createAsyncThunk\n      const user = resultAction.payload\n      showToast('success', `Updated ${user.first_name} ${user.last_name}`)\n    } else {\n      if (resultAction.payload) {\n        // Being that we passed in ValidationErrors to rejectType in `createAsyncThunk`, those types will be available here.\n        formikHelpers.setErrors(resultAction.payload.field_errors)\n      } else {\n        showToast('error', `Update failed: ${resultAction.error}`)\n      }\n    }\n  }\n\n  // render UI here\n}\n"))),Object(i.b)(o.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"// file: user/slice.ts\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { userAPI } from './userAPI'\n\nexport const updateUser = createAsyncThunk(\n  'users/update',\n  async (userData, { rejectWithValue }) => {\n    try {\n      const { id, ...fields } = userData\n      const response = await userAPI.updateById(id, fields)\n      return response.data.user\n    } catch (err) {\n      let error = err // cast the error for access\n      if (!error.response) {\n        throw err\n      }\n      // We got validation errors, let's return those so we can reference in our component and set form errors\n      return rejectWithValue(error.response.data)\n    }\n  }\n)\n\nconst initialState = {\n  entities: {},\n  error: null,\n}\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    // The `builder` callback form is used here because it provides correctly typed reducers from the action creators\n    builder.addCase(updateUser.fulfilled, (state, { payload }) => {\n      state.entities[payload.id] = payload\n    })\n    builder.addCase(updateUser.rejected, (state, action) => {\n      if (action.payload) {\n        // Being that we passed in ValidationErrors to rejectType in `createAsyncThunk`, the payload will be available here.\n        state.error = action.payload.errorMessage\n      } else {\n        state.error = action.error.message\n      }\n    })\n  },\n})\n\nexport default usersSlice.reducer\n\n\n// file: user/UsersComponent.ts\nimport { useAppDispatch } from '../store'\nimport { useSelector } from 'react-redux'\nimport { updateUser } from './slice'\nimport { showToast } from 'some-toast-library'\n\nconst UsersComponent = (props) => {\n  const { entities, error } = useSelector((state) => state.users)\n  const dispatch = useAppDispatch()\n\n  // This is an example of an onSubmit handler using Formik meant to demonstrate accessing the payload of the rejected action\n  const handleUpdateUser = async (values, formikHelpers) => {\n    const resultAction = await dispatch(updateUser({ id: props.id, ...values }))\n    if (updateUser.fulfilled.match(resultAction)) {\n      // user will have a type signature of User as we passed that as the Returned parameter in createAsyncThunk\n      const user = resultAction.payload\n      showToast('success', `Updated ${user.first_name} ${user.last_name}`)\n    } else {\n      if (resultAction.payload) {\n        // Being that we passed in ValidationErrors to rejectType in `createAsyncThunk`, those types will be available here.\n        formikHelpers.setErrors(resultAction.payload.field_errors)\n      } else {\n        showToast('error', `Update failed: ${resultAction.error}`)\n      }\n    }\n  }\n\n  // render UI here\n}\n")))))}p.isMDXComponent=!0}}]);