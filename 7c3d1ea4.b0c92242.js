/*! For license information please see 7c3d1ea4.b0c92242.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{103:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(n),b=a,h=d["".concat(o,".").concat(b)]||d[b]||u[b]||i;return n?r.a.createElement(h,c(c({ref:t},s),{},{components:n})):r.a.createElement(h,c({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=b;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},104:function(e,t,n){"use strict";e.exports=n(105)},105:function(e,t,n){"use strict";var a=n(106),r="function"==typeof Symbol&&Symbol.for,i=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,c=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,s=r?Symbol.for("react.profiler"):60114,p=r?Symbol.for("react.provider"):60109,d=r?Symbol.for("react.context"):60110,u=r?Symbol.for("react.forward_ref"):60112,b=r?Symbol.for("react.suspense"):60113,h=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,m="function"==typeof Symbol&&Symbol.iterator;function f(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},j={};function O(e,t,n){this.props=e,this.context=t,this.refs=j,this.updater=n||g}function w(){}function N(e,t,n){this.props=e,this.context=t,this.refs=j,this.updater=n||g}O.prototype.isReactComponent={},O.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(f(85));this.updater.enqueueSetState(this,e,t,"setState")},O.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=O.prototype;var C=N.prototype=new w;C.constructor=N,a(C,O.prototype),C.isPureReactComponent=!0;var v={current:null},S=Object.prototype.hasOwnProperty,A={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var a,r={},o=null,c=null;if(null!=t)for(a in void 0!==t.ref&&(c=t.ref),void 0!==t.key&&(o=""+t.key),t)S.call(t,a)&&!A.hasOwnProperty(a)&&(r[a]=t[a]);var l=arguments.length-2;if(1===l)r.children=n;else if(1<l){for(var s=Array(l),p=0;p<l;p++)s[p]=arguments[p+2];r.children=s}if(e&&e.defaultProps)for(a in l=e.defaultProps)void 0===r[a]&&(r[a]=l[a]);return{$$typeof:i,type:e,key:o,ref:c,props:r,_owner:v.current}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var T=/\/+/g,R=[];function I(e,t,n,a){if(R.length){var r=R.pop();return r.result=e,r.keyPrefix=t,r.func=n,r.context=a,r.count=0,r}return{result:e,keyPrefix:t,func:n,context:a,count:0}}function P(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>R.length&&R.push(e)}function D(e,t,n,a){var r=typeof e;"undefined"!==r&&"boolean"!==r||(e=null);var c=!1;if(null===e)c=!0;else switch(r){case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case i:case o:c=!0}}if(c)return n(a,e,""===t?"."+E(e,0):t),1;if(c=0,t=""===t?".":t+":",Array.isArray(e))for(var l=0;l<e.length;l++){var s=t+E(r=e[l],l);c+=D(r,s,n,a)}else if(null===e||"object"!=typeof e?s=null:s="function"==typeof(s=m&&e[m]||e["@@iterator"])?s:null,"function"==typeof s)for(e=s.call(e),l=0;!(r=e.next()).done;)c+=D(r=r.value,s=t+E(r,l++),n,a);else if("object"===r)throw n=""+e,Error(f(31,"[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n,""));return c}function M(e,t,n){return null==e?0:D(e,"",t,n)}function E(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function U(e,t){e.func.call(e.context,t,e.count++)}function _(e,t,n){var a=e.result,r=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?$(e,a,n,(function(e){return e})):null!=e&&(x(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,r+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(T,"$&/")+"/")+n)),a.push(e))}function $(e,t,n,a,r){var i="";null!=n&&(i=(""+n).replace(T,"$&/")+"/"),M(e,_,t=I(t,i,a,r)),P(t)}var z={current:null};function B(){var e=z.current;if(null===e)throw Error(f(321));return e}var V={ReactCurrentDispatcher:z,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:v,IsSomeRendererActing:{current:!1},assign:a};t.Children={map:function(e,t,n){if(null==e)return e;var a=[];return $(e,a,null,t,n),a},forEach:function(e,t,n){if(null==e)return e;M(e,U,t=I(null,null,t,n)),P(t)},count:function(e){return M(e,(function(){return null}),null)},toArray:function(e){var t=[];return $(e,t,null,(function(e){return e})),t},only:function(e){if(!x(e))throw Error(f(143));return e}},t.Component=O,t.Fragment=c,t.Profiler=s,t.PureComponent=N,t.StrictMode=l,t.Suspense=b,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=V,t.cloneElement=function(e,t,n){if(null==e)throw Error(f(267,e));var r=a({},e.props),o=e.key,c=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(c=t.ref,l=v.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(p in t)S.call(t,p)&&!A.hasOwnProperty(p)&&(r[p]=void 0===t[p]&&void 0!==s?s[p]:t[p])}var p=arguments.length-2;if(1===p)r.children=n;else if(1<p){s=Array(p);for(var d=0;d<p;d++)s[d]=arguments[d+2];r.children=s}return{$$typeof:i,type:e.type,key:o,ref:c,props:r,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:d,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:p,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:y,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return B().useCallback(e,t)},t.useContext=function(e,t){return B().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return B().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return B().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return B().useLayoutEffect(e,t)},t.useMemo=function(e,t){return B().useMemo(e,t)},t.useReducer=function(e,t,n){return B().useReducer(e,t,n)},t.useRef=function(e){return B().useRef(e)},t.useState=function(e){return B().useState(e)},t.version="16.14.0"},106:function(e,t,n){"use strict";var a=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var a={};return"abcdefghijklmnopqrst".split("").forEach((function(e){a[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},a)).join("")}catch(r){return!1}}()?Object.assign:function(e,t){for(var n,c,l=o(e),s=1;s<arguments.length;s++){for(var p in n=Object(arguments[s]))r.call(n,p)&&(l[p]=n[p]);if(a){c=a(n);for(var d=0;d<c.length;d++)i.call(n,c[d])&&(l[c[d]]=n[c[d]])}}return l}},85:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),i=(n(104),n(103)),o={id:"usage-with-typescript",title:"Usage With TypeScript",sidebar_label:"Usage With TypeScript",hide_title:!0},c={unversionedId:"usage/usage-with-typescript",id:"usage/usage-with-typescript",isDocsHomePage:!1,title:"Usage With TypeScript",description:"Usage With TypeScript",source:"@site/../docs/usage/usage-with-typescript.md",slug:"/usage/usage-with-typescript",permalink:"/usage/usage-with-typescript",version:"current",sidebar_label:"Usage With TypeScript",sidebar:"docs",previous:{title:"Usage Guide",permalink:"/usage/usage-guide"},next:{title:"Writing Reducers with Immer",permalink:"/usage/immer-reducers"}},l=[{value:"Introduction",id:"introduction",children:[]},{value:"<code>configureStore</code>",id:"configurestore",children:[{value:"Getting the <code>State</code> type",id:"getting-the-state-type",children:[]},{value:"Getting the <code>Dispatch</code> type",id:"getting-the-dispatch-type",children:[]},{value:"Correct typings for the <code>Dispatch</code> type",id:"correct-typings-for-the-dispatch-type",children:[]},{value:"Using the extracted <code>Dispatch</code> type with React Redux",id:"using-the-extracted-dispatch-type-with-react-redux",children:[]}]},{value:"<code>createAction</code>",id:"createaction",children:[{value:"Alternative to using a literally-typed <code>action.type</code>",id:"alternative-to-using-a-literally-typed-actiontype",children:[]}]},{value:"<code>createReducer</code>",id:"createreducer",children:[{value:"Building Type-Safe Reducer Argument Objects",id:"building-type-safe-reducer-argument-objects",children:[]}]},{value:"<code>createSlice</code>",id:"createslice",children:[{value:"Defining the Initial State Type",id:"defining-the-initial-state-type",children:[]},{value:"Defining Action Contents with <code>prepare</code> Callbacks",id:"defining-action-contents-with-prepare-callbacks",children:[]},{value:"Generated Action Types for Slices",id:"generated-action-types-for-slices",children:[]},{value:"Type safety with <code>extraReducers</code>",id:"type-safety-with-extrareducers",children:[]},{value:"Wrapping <code>createSlice</code>",id:"wrapping-createslice",children:[]}]},{value:"<code>createAsyncThunk</code>",id:"createasyncthunk",children:[]},{value:"<code>createEntityAdapter</code>",id:"createentityadapter",children:[{value:"Using <code>createEntityAdapter</code> with <code>normalizr</code>",id:"using-createentityadapter-with-normalizr",children:[]}]}],s={toc:l};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"usage-with-typescript"},"Usage With TypeScript"),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"What You'll Learn")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("ul",{parentName:"div"},Object(i.b)("li",{parentName:"ul"},"Details on how to use each Redux Toolkit API with TypeScript")))),Object(i.b)("h2",{id:"introduction"},"Introduction"),Object(i.b)("p",null,"Redux Toolkit is written in TypeScript, and its API is designed to enable great integration with TypeScript applications."),Object(i.b)("p",null,"This page provides specific details for each of the different APIs included in Redux Toolkit and how to type them correctly with TypeScript."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"See the ",Object(i.b)("a",{parentName:"strong",href:"/tutorials/typescript"},"TypeScript Quick Start tutorial page")," for a brief overview of how to set up and use Redux Toolkit and React Redux to work with TypeScript"),"."),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"If you encounter any problems with the types that are not described on this page, please ",Object(i.b)("a",{parentName:"p",href:"https://github.com/reduxjs/redux-toolkit/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc"},"open an issue")," for discussion."))),Object(i.b)("h2",{id:"configurestore"},Object(i.b)("inlineCode",{parentName:"h2"},"configureStore")),Object(i.b)("p",null,"The basics of using ",Object(i.b)("inlineCode",{parentName:"p"},"configureStore")," are shown in ",Object(i.b)("a",{parentName:"p",href:"/tutorials/typescript"},"TypeScript Quick Start tutorial page"),". Here are some additional details that you might find useful."),Object(i.b)("h3",{id:"getting-the-state-type"},"Getting the ",Object(i.b)("inlineCode",{parentName:"h3"},"State")," type"),Object(i.b)("p",null,"The easiest way of getting the ",Object(i.b)("inlineCode",{parentName:"p"},"State")," type is to define the root reducer in advance and extract its ",Object(i.b)("inlineCode",{parentName:"p"},"ReturnType"),".",Object(i.b)("br",{parentName:"p"}),"\n","It is recommend to give the type a different name like ",Object(i.b)("inlineCode",{parentName:"p"},"RootState")," to prevent confusion, as the type name ",Object(i.b)("inlineCode",{parentName:"p"},"State")," is usually overused."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"import { combineReducers } from '@reduxjs/toolkit'\nconst rootReducer = combineReducers({})\n// highlight-start\nexport type RootState = ReturnType<typeof rootReducer>\n// highlight-end\n")),Object(i.b)("p",null,"Alternatively, if you choose to not create a ",Object(i.b)("inlineCode",{parentName:"p"},"rootReducer")," yourself and instead pass the slice reducers directly to ",Object(i.b)("inlineCode",{parentName:"p"},"configureStore()"),", you need to slightly modify the typing to correctly infer the root reducer:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"import { configureStore } from '@reduxjs/toolkit'\n// ...\nconst store = configureStore({\n  reducer: {\n    one: oneSlice.reducer,\n    two: twoSlice.reducer,\n  },\n})\nexport type RootState = ReturnType<typeof store.getState>\n\nexport default store\n")),Object(i.b)("h3",{id:"getting-the-dispatch-type"},"Getting the ",Object(i.b)("inlineCode",{parentName:"h3"},"Dispatch")," type"),Object(i.b)("p",null,"If you want to get the ",Object(i.b)("inlineCode",{parentName:"p"},"Dispatch")," type from your store, you can extract it after creating the store. It is recommended to give the type a different name like ",Object(i.b)("inlineCode",{parentName:"p"},"AppDispatch")," to prevent confusion, as the type name ",Object(i.b)("inlineCode",{parentName:"p"},"Dispatch")," is usually overused. You may also find it to be more convenient to export a hook like ",Object(i.b)("inlineCode",{parentName:"p"},"useAppDispatch")," shown below, then using it wherever you'd call ",Object(i.b)("inlineCode",{parentName:"p"},"useDispatch"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"import { configureStore } from '@reduxjs/toolkit'\nimport { useDispatch } from 'react-redux'\nimport rootReducer from './rootReducer'\n\nconst store = configureStore({\n  reducer: rootReducer,\n})\n\n// highlight-start\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>() // Export a hook that can be reused to resolve types\n// highlight-end\n\nexport default store\n")),Object(i.b)("h3",{id:"correct-typings-for-the-dispatch-type"},"Correct typings for the ",Object(i.b)("inlineCode",{parentName:"h3"},"Dispatch")," type"),Object(i.b)("p",null,"The type of the ",Object(i.b)("inlineCode",{parentName:"p"},"dispatch")," function type will be directly inferred from the ",Object(i.b)("inlineCode",{parentName:"p"},"middleware")," option. So if you add ",Object(i.b)("em",{parentName:"p"},"correctly typed")," middlewares, ",Object(i.b)("inlineCode",{parentName:"p"},"dispatch")," should already be correctly typed."),Object(i.b)("p",null,"As TypeScript often widens array types when combining arrays using the spread operator, we suggest using the ",Object(i.b)("inlineCode",{parentName:"p"},".concat(...)")," and ",Object(i.b)("inlineCode",{parentName:"p"},".prepend(...)")," methods of the ",Object(i.b)("inlineCode",{parentName:"p"},"MiddlewareArray")," returned by ",Object(i.b)("inlineCode",{parentName:"p"},"getDefaultMiddleware()"),"."),Object(i.b)("p",null,"Also, we suggest using the callback notation for the ",Object(i.b)("inlineCode",{parentName:"p"},"middleware")," option to get a correctly pre-typed version of ",Object(i.b)("inlineCode",{parentName:"p"},"getDefaultMiddleware")," that does not require you to specify any generics by hand."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"import { configureStore } from '@reduxjs/toolkit'\nimport additionalMiddleware from 'additional-middleware'\nimport logger from 'redux-logger'\n// @ts-ignore\nimport untypedMiddleware from 'untyped-middleware'\nimport rootReducer from './rootReducer'\n\nexport type RootState = ReturnType<typeof rootReducer>\nconst store = configureStore({\n  reducer: rootReducer,\n  // highlight-start\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware()\n      .prepend(\n        // correctly typed middlewares can just be used\n        additionalMiddleware,\n        // you can also type middlewares manually\n        untypedMiddleware as Middleware<\n          (action: Action<'specialAction'>) => number,\n          RootState\n        >\n      )\n      // prepend and concat calls can be chained\n      .concat(logger),\n  // highlight-end\n})\n\nexport type AppDispatch = typeof store.dispatch\n\nexport default store\n")),Object(i.b)("h4",{id:"using-middlewarearray-without-getdefaultmiddleware"},"Using ",Object(i.b)("inlineCode",{parentName:"h4"},"MiddlewareArray")," without ",Object(i.b)("inlineCode",{parentName:"h4"},"getDefaultMiddleware")),Object(i.b)("p",null,"If you want to skip the usage of ",Object(i.b)("inlineCode",{parentName:"p"},"getDefaultMiddleware")," altogether, you can still use ",Object(i.b)("inlineCode",{parentName:"p"},"MiddlewareArray")," for type-safe concatenation of your ",Object(i.b)("inlineCode",{parentName:"p"},"middleware")," array. This class extends the default JavaScript ",Object(i.b)("inlineCode",{parentName:"p"},"Array")," type, only with modified typings for ",Object(i.b)("inlineCode",{parentName:"p"},".concat(...)")," and the additional ",Object(i.b)("inlineCode",{parentName:"p"},".prepend(...)")," method."),Object(i.b)("p",null,"This is generally not required though, as you will probably not run into any array-type-widening issues as long as you are using ",Object(i.b)("inlineCode",{parentName:"p"},"as const")," and do not use the spread operator."),Object(i.b)("p",null,"So the following two calls would be equivalent:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"import { configureStore, MiddlewareArray } from '@reduxjs/toolkit'\n\nconfigureStore({\n  reducer: rootReducer,\n  middleware: new MiddlewareArray().concat(additionalMiddleware, logger),\n})\n\nconfigureStore({\n  reducer: rootReducer,\n  middleware: [additionalMiddleware, logger] as const,\n})\n")),Object(i.b)("h3",{id:"using-the-extracted-dispatch-type-with-react-redux"},"Using the extracted ",Object(i.b)("inlineCode",{parentName:"h3"},"Dispatch")," type with React Redux"),Object(i.b)("p",null,"By default, the React Redux ",Object(i.b)("inlineCode",{parentName:"p"},"useDispatch")," hook does not contain any types that take middlewares into account. If you need a more specific type for the ",Object(i.b)("inlineCode",{parentName:"p"},"dispatch")," function when dispatching, you may specify the type of the returned ",Object(i.b)("inlineCode",{parentName:"p"},"dispatch")," function, or create a custom-typed version of ",Object(i.b)("inlineCode",{parentName:"p"},"useSelector"),". See ",Object(i.b)("a",{parentName:"p",href:"https://react-redux.js.org/using-react-redux/static-typing#typing-the-usedispatch-hook"},"the React Redux documentation")," for details."),Object(i.b)("h2",{id:"createaction"},Object(i.b)("inlineCode",{parentName:"h2"},"createAction")),Object(i.b)("p",null,"For most use cases, there is no need to have a literal definition of ",Object(i.b)("inlineCode",{parentName:"p"},"action.type"),", so the following can be used:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"createAction<number>('test')\n")),Object(i.b)("p",null,"This will result in the created action being of type ",Object(i.b)("inlineCode",{parentName:"p"},"PayloadActionCreator<number, string>"),"."),Object(i.b)("p",null,"In some setups, you will need a literal type for ",Object(i.b)("inlineCode",{parentName:"p"},"action.type"),", though.\nUnfortunately, TypeScript type definitions do not allow for a mix of manually-defined and inferred type parameters, so you'll have to specify the ",Object(i.b)("inlineCode",{parentName:"p"},"type")," both in the Generic definition as well as in the actual JavaScript code:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"createAction<number, 'test'>('test')\n")),Object(i.b)("p",null,"If you are looking for an alternate way of writing this without the duplication, you can use a prepare callback so that both type parameters can be inferred from arguments, removing the need to specify the action type."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"function withPayloadType<T>() {\n  return (t: T) => ({ payload: t })\n}\ncreateAction('test', withPayloadType<string>())\n")),Object(i.b)("h3",{id:"alternative-to-using-a-literally-typed-actiontype"},"Alternative to using a literally-typed ",Object(i.b)("inlineCode",{parentName:"h3"},"action.type")),Object(i.b)("p",null,"If you are using ",Object(i.b)("inlineCode",{parentName:"p"},"action.type")," as a discriminator on a discriminated union, for example to correctly type your payload in ",Object(i.b)("inlineCode",{parentName:"p"},"case")," statements, you might be interested in this alternative:"),Object(i.b)("p",null,"Created action creators have a ",Object(i.b)("inlineCode",{parentName:"p"},"match")," method that acts as a ",Object(i.b)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates"},"type predicate"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"const increment = createAction<number>('increment')\nfunction test(action: Action) {\n  if (increment.match(action)) {\n    // action.payload inferred correctly here\n    action.payload\n  }\n}\n")),Object(i.b)("p",null,"This ",Object(i.b)("inlineCode",{parentName:"p"},"match")," method is also very useful in combination with ",Object(i.b)("inlineCode",{parentName:"p"},"redux-observable")," and RxJS's ",Object(i.b)("inlineCode",{parentName:"p"},"filter")," method."),Object(i.b)("h2",{id:"createreducer"},Object(i.b)("inlineCode",{parentName:"h2"},"createReducer")),Object(i.b)("p",null,"The default way of calling ",Object(i.b)("inlineCode",{parentName:"p"},"createReducer"),' would be with a "lookup table" / "map object", like this:'),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"createReducer(0, {\n  increment: (state, action: PayloadAction<number>) => state + action.payload,\n})\n")),Object(i.b)("p",null,"Unfortunately, as the keys are only strings, using that API TypeScript can neither infer nor validate the action types for you:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"{\n  const increment = createAction<number, 'increment'>('increment')\n  const decrement = createAction<number, 'decrement'>('decrement')\n  createReducer(0, {\n    [increment.type]: (state, action) => {\n      // action is any here\n    },\n    [decrement.type]: (state, action: PayloadAction<string>) => {\n      // even though action should actually be PayloadAction<number>, TypeScript can't detect that and won't give a warning here.\n    },\n  })\n}\n")),Object(i.b)("p",null,"As an alternative, RTK includes a type-safe reducer builder API."),Object(i.b)("h3",{id:"building-type-safe-reducer-argument-objects"},"Building Type-Safe Reducer Argument Objects"),Object(i.b)("p",null,"Instead of using a simple object as an argument to ",Object(i.b)("inlineCode",{parentName:"p"},"createReducer"),", you can also use a callback that receives a ",Object(i.b)("inlineCode",{parentName:"p"},"ActionReducerMapBuilder")," instance:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript",metastring:"{3-10}","{3-10}":!0},"const increment = createAction<number, 'increment'>('increment')\nconst decrement = createAction<number, 'decrement'>('decrement')\ncreateReducer(0, (builder) =>\n  builder\n    .addCase(increment, (state, action) => {\n      // action is inferred correctly here\n    })\n    .addCase(decrement, (state, action: PayloadAction<string>) => {\n      // this would error out\n    })\n)\n")),Object(i.b)("p",null,"We recommend using this API if stricter type safety is necessary when defining reducer argument objects."),Object(i.b)("h4",{id:"typing-builderaddmatcher"},"Typing ",Object(i.b)("inlineCode",{parentName:"h4"},"builder.addMatcher")),Object(i.b)("p",null,"As the first ",Object(i.b)("inlineCode",{parentName:"p"},"matcher")," argument to ",Object(i.b)("inlineCode",{parentName:"p"},"builder.addMatcher"),", a ",Object(i.b)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/advanced-types.html#using-type-predicates"},"type predicate")," function should be used.\nAs a result, the ",Object(i.b)("inlineCode",{parentName:"p"},"action")," argument for the second ",Object(i.b)("inlineCode",{parentName:"p"},"reducer")," argument can be inferred by TypeScript:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"function isNumberValueAction(action: AnyAction): action is PayloadAction<{ value: number }> {\n  return typeof action.payload.value === 'number'\n}\n\ncreateReducer({ value: 0 }, builder =>\n   builder.addMatcher(isNumberValueAction, (state, action) => {\n      state.value += action.payload.value\n   })\n})\n")),Object(i.b)("h2",{id:"createslice"},Object(i.b)("inlineCode",{parentName:"h2"},"createSlice")),Object(i.b)("p",null,"As ",Object(i.b)("inlineCode",{parentName:"p"},"createSlice")," creates your actions as well as your reducer for you, you don't have to worry about type safety here.\nAction types can just be provided inline:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"const slice = createSlice({\n  name: 'test',\n  initialState: 0,\n  reducers: {\n    increment: (state, action: PayloadAction<number>) => state + action.payload,\n  },\n})\n// now available:\nslice.actions.increment(2)\n// also available:\nslice.caseReducers.increment(0, { type: 'increment', payload: 5 })\n")),Object(i.b)("p",null,"If you have too many case reducers and defining them inline would be messy, or you want to reuse case reducers across slices, you can also define them outside the ",Object(i.b)("inlineCode",{parentName:"p"},"createSlice")," call and type them as ",Object(i.b)("inlineCode",{parentName:"p"},"CaseReducer"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"type State = number\nconst increment: CaseReducer<State, PayloadAction<number>> = (state, action) =>\n  state + action.payload\n\ncreateSlice({\n  name: 'test',\n  initialState: 0,\n  reducers: {\n    increment,\n  },\n})\n")),Object(i.b)("h3",{id:"defining-the-initial-state-type"},"Defining the Initial State Type"),Object(i.b)("p",null,"You might have noticed that it is not a good idea to pass your ",Object(i.b)("inlineCode",{parentName:"p"},"SliceState")," type as a generic to ",Object(i.b)("inlineCode",{parentName:"p"},"createSlice"),". This is due to the fact that in almost all cases, follow-up generic parameters to ",Object(i.b)("inlineCode",{parentName:"p"},"createSlice"),' need to be inferred, and TypeScript cannot mix explicit declaration and inference of generic types within the same "generic block".'),Object(i.b)("p",null,"The standard approach is to declare an interface or type for your state, create an initial state value that uses that type, and pass the initial state value to ",Object(i.b)("inlineCode",{parentName:"p"},"createSlice"),". You can also use the construct ",Object(i.b)("inlineCode",{parentName:"p"},"initialState: myInitialState as SliceState"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts",metastring:"{1,4,8,15}","{1,4,8,15}":!0},"type SliceState = { state: 'loading' } | { state: 'finished'; data: string }\n\n// First approach: define the initial state using that type\nconst initialState: SliceState = { state: 'loading' }\n\ncreateSlice({\n  name: 'test1',\n  initialState, // type SliceState is inferred for the state of the slice\n  reducers: {},\n})\n\n// Or, cast the initial state as necessary\ncreateSlice({\n  name: 'test2',\n  initialState: { state: 'loading' } as SliceState,\n  reducers: {},\n})\n")),Object(i.b)("p",null,"which will result in a ",Object(i.b)("inlineCode",{parentName:"p"},"Slice<SliceState, ...>"),"."),Object(i.b)("h3",{id:"defining-action-contents-with-prepare-callbacks"},"Defining Action Contents with ",Object(i.b)("inlineCode",{parentName:"h3"},"prepare")," Callbacks"),Object(i.b)("p",null,"If you want to add a ",Object(i.b)("inlineCode",{parentName:"p"},"meta")," or ",Object(i.b)("inlineCode",{parentName:"p"},"error")," property to your action, or customize the ",Object(i.b)("inlineCode",{parentName:"p"},"payload")," of your action, you have to use the ",Object(i.b)("inlineCode",{parentName:"p"},"prepare")," notation."),Object(i.b)("p",null,"Using this notation with TypeScript looks like this:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts",metastring:"{5-16}","{5-16}":!0},"const blogSlice = createSlice({\n  name: 'blogData',\n  initialState,\n  reducers: {\n    receivedAll: {\n      reducer(\n        state,\n        action: PayloadAction<Page[], string, { currentPage: number }>\n      ) {\n        state.all = action.payload\n        state.meta = action.meta\n      },\n      prepare(payload: Page[], currentPage: number) {\n        return { payload, meta: { currentPage } }\n      },\n    },\n  },\n})\n")),Object(i.b)("h3",{id:"generated-action-types-for-slices"},"Generated Action Types for Slices"),Object(i.b)("p",null,"As TS cannot combine two string literals (",Object(i.b)("inlineCode",{parentName:"p"},"slice.name")," and the key of ",Object(i.b)("inlineCode",{parentName:"p"},"actionMap"),") into a new literal, all actionCreators created by ",Object(i.b)("inlineCode",{parentName:"p"},"createSlice")," are of type 'string'. This is usually not a problem, as these types are only rarely used as literals."),Object(i.b)("p",null,"In most cases that ",Object(i.b)("inlineCode",{parentName:"p"},"type")," would be required as a literal, the ",Object(i.b)("inlineCode",{parentName:"p"},"slice.action.myAction.match")," ",Object(i.b)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/advanced-types.html#using-type-predicates"},"type predicate")," should be a viable alternative:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts",metastring:"{10}","{10}":!0},"const slice = createSlice({\n  name: 'test',\n  initialState: 0,\n  reducers: {\n    increment: (state, action: PayloadAction<number>) => state + action.payload,\n  },\n})\n\nfunction myCustomMiddleware(action: Action) {\n  if (slice.actions.increment.match(action)) {\n    // `action` is narrowed down to the type `PayloadAction<number>` here.\n  }\n}\n")),Object(i.b)("p",null,"If you actually ",Object(i.b)("em",{parentName:"p"},"need")," that type, unfortunately there is no other way than manual casting."),Object(i.b)("h3",{id:"type-safety-with-extrareducers"},"Type safety with ",Object(i.b)("inlineCode",{parentName:"h3"},"extraReducers")),Object(i.b)("p",null,"Reducer lookup tables that map an action ",Object(i.b)("inlineCode",{parentName:"p"},"type")," string to a reducer function are not easy to fully type correctly. This affects both ",Object(i.b)("inlineCode",{parentName:"p"},"createReducer")," and the ",Object(i.b)("inlineCode",{parentName:"p"},"extraReducers")," argument for ",Object(i.b)("inlineCode",{parentName:"p"},"createSlice"),". So, like with ",Object(i.b)("inlineCode",{parentName:"p"},"createReducer"),", ",Object(i.b)("a",{parentName:"p",href:"#building-type-safe-reducer-argument-objects"},'you may also use the "builder callback" approach')," for defining the reducer object argument."),Object(i.b)("p",null,"This is particularly useful when a slice reducer needs to handle action types generated by other slices, or generated by specific calls to ",Object(i.b)("inlineCode",{parentName:"p"},"createAction")," (such as the actions generated by ",Object(i.b)("a",{parentName:"p",href:"/api/createAsyncThunk"},Object(i.b)("inlineCode",{parentName:"a"},"createAsyncThunk")),")."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts",metastring:"{27-30}","{27-30}":!0},"const fetchUserById = createAsyncThunk(\n  'users/fetchById',\n  // if you type your function argument here\n  async (userId: number) => {\n    const response = await fetch(`https://reqres.in/api/users/${userId}`)\n    return (await response.json()) as Returned\n  }\n)\n\ninterface UsersState {\n  entities: []\n  loading: 'idle' | 'pending' | 'succeeded' | 'failed'\n}\n\nconst initialState = {\n  entities: [],\n  loading: 'idle',\n} as UsersState\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {\n    // fill in primary logic here\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchUserById.pending, (state, action) => {\n      // both `state` and `action` are now correctly typed\n      // based on the slice state and the `pending` action creator\n    })\n  },\n})\n")),Object(i.b)("p",null,"Like the ",Object(i.b)("inlineCode",{parentName:"p"},"builder")," in ",Object(i.b)("inlineCode",{parentName:"p"},"createReducer"),", this ",Object(i.b)("inlineCode",{parentName:"p"},"builder")," also accepts ",Object(i.b)("inlineCode",{parentName:"p"},"addMatcher")," (see ",Object(i.b)("a",{parentName:"p",href:"#typing-builderaddmatcher"},"typing ",Object(i.b)("inlineCode",{parentName:"a"},"builder.matcher")),") and ",Object(i.b)("inlineCode",{parentName:"p"},"addDefaultCase"),"."),Object(i.b)("h3",{id:"wrapping-createslice"},"Wrapping ",Object(i.b)("inlineCode",{parentName:"h3"},"createSlice")),Object(i.b)("p",null,"If you need to reuse reducer logic, it is common to write ",Object(i.b)("a",{parentName:"p",href:"https://redux.js.org/recipes/structuring-reducers/reusing-reducer-logic#customizing-behavior-with-higher-order-reducers"},'"higher-order reducers"')," that wrap a reducer function with additional common behavior. This can be done with ",Object(i.b)("inlineCode",{parentName:"p"},"createSlice")," as well, but due to the complexity of the types for ",Object(i.b)("inlineCode",{parentName:"p"},"createSlice"),", you have to use the ",Object(i.b)("inlineCode",{parentName:"p"},"SliceCaseReducers")," and ",Object(i.b)("inlineCode",{parentName:"p"},"ValidateSliceCaseReducers")," types in a very specific way."),Object(i.b)("p",null,'Here is an example of such a "generic" wrapped ',Object(i.b)("inlineCode",{parentName:"p"},"createSlice")," call:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"interface GenericState<T> {\n  data?: T\n  status: 'loading' | 'finished' | 'error'\n}\n\nconst createGenericSlice = <\n  T,\n  Reducers extends SliceCaseReducers<GenericState<T>>\n>({\n  name = '',\n  initialState,\n  reducers,\n}: {\n  name: string\n  initialState: GenericState<T>\n  reducers: ValidateSliceCaseReducers<GenericState<T>, Reducers>\n}) => {\n  return createSlice({\n    name,\n    initialState,\n    reducers: {\n      start(state) {\n        state.status = 'loading'\n      },\n      /**\n       * If you want to write to values of the state that depend on the generic\n       * (in this case: `state.data`, which is T), you might need to specify the\n       * State type manually here, as it defaults to `Draft<GenericState<T>>`,\n       * which can sometimes be problematic with yet-unresolved generics.\n       * This is a general problem when working with immer's Draft type and generics.\n       */\n      success(state: GenericState<T>, action: PayloadAction<T>) {\n        state.data = action.payload\n        state.status = 'finished'\n      },\n      ...reducers,\n    },\n  })\n}\n\nconst wrappedSlice = createGenericSlice({\n  name: 'test',\n  initialState: { status: 'loading' } as GenericState<string>,\n  reducers: {\n    magic(state) {\n      state.status = 'finished'\n      state.data = 'hocus pocus'\n    },\n  },\n})\n")),Object(i.b)("h2",{id:"createasyncthunk"},Object(i.b)("inlineCode",{parentName:"h2"},"createAsyncThunk")),Object(i.b)("p",null,"In the most common use cases, you should not need to explicitly declare any types for the ",Object(i.b)("inlineCode",{parentName:"p"},"createAsyncThunk")," call itself."),Object(i.b)("p",null,"Just provide a type for the first argument to the ",Object(i.b)("inlineCode",{parentName:"p"},"payloadCreator")," argument as you would for any function argument, and the resulting thunk will accept the same type as its input parameter.\nThe return type of the ",Object(i.b)("inlineCode",{parentName:"p"},"payloadCreator")," will also be reflected in all generated action types."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},'interface MyData {\n  // ...\n}\n\nconst fetchUserById = createAsyncThunk(\n  \'users/fetchById\',\n  // highlight-start\n  // Declare the type your function argument here:\n  async (userId: number) => {\n    // highlight-end\n    const response = await fetch(`https://reqres.in/api/users/${userId}`)\n    // Inferred return type: Promise<MyData>\n    // highlight-next-line\n    return (await response.json()) as MyData\n  }\n)\n\n// the parameter of `fetchUserById` is automatically inferred to `number` here\n// and dispatching the resulting thunkAction will return a Promise of a correctly\n// typed "fulfilled" or "rejected" action.\nconst lastReturnedAction = await store.dispatch(fetchUserById(3))\n')),Object(i.b)("p",null,"The second argument to the ",Object(i.b)("inlineCode",{parentName:"p"},"payloadCreator"),", known as ",Object(i.b)("inlineCode",{parentName:"p"},"thunkApi"),", is an object containing references to the ",Object(i.b)("inlineCode",{parentName:"p"},"dispatch"),", ",Object(i.b)("inlineCode",{parentName:"p"},"getState"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"extra")," arguments from the thunk middleware as well as a utility function called ",Object(i.b)("inlineCode",{parentName:"p"},"rejectWithValue"),". If you want to use these from within the ",Object(i.b)("inlineCode",{parentName:"p"},"payloadCreator"),", you will need to define some generic arguments, as the types for these arguments cannot be inferred. Also, as TS cannot mix explicit and inferred generic parameters, from this point on you'll have to define the ",Object(i.b)("inlineCode",{parentName:"p"},"Returned")," and ",Object(i.b)("inlineCode",{parentName:"p"},"ThunkArg")," generic parameter as well."),Object(i.b)("p",null,"To define the types for these arguments, pass an object as the third generic argument, with type declarations for some or all of these fields: ",Object(i.b)("inlineCode",{parentName:"p"},"{dispatch?, state?, extra?, rejectValue?}"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"const fetchUserById = createAsyncThunk<\n  // highlight-start\n  // Return type of the payload creator\n  MyData,\n  // First argument to the payload creator\n  number,\n  {\n    // Optional fields for defining thunkApi field types\n    dispatch: AppDispatch\n    state: State\n    extra: {\n      jwt: string\n    }\n  }\n  // highlight-end\n>('users/fetchById', async (userId, thunkApi) => {\n  const response = await fetch(`https://reqres.in/api/users/${userId}`, {\n    headers: {\n      Authorization: `Bearer ${thunkApi.extra.jwt}`,\n    },\n  })\n  return (await response.json()) as MyData\n})\n")),Object(i.b)("p",null,"If you are performing a request that you know will typically either be a success or have an expected error format, you can pass in a type to ",Object(i.b)("inlineCode",{parentName:"p"},"rejectValue")," and ",Object(i.b)("inlineCode",{parentName:"p"},"return rejectWithValue(knownPayload)")," in the action creator. This allows you to reference the error payload in the reducer as well as in a component after dispatching the ",Object(i.b)("inlineCode",{parentName:"p"},"createAsyncThunk")," action."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"interface MyKnownError {\n  errorMessage: string\n  // ...\n}\ninterface UserAttributes {\n  id: string\n  first_name: string\n  last_name: string\n  email: string\n}\n\nconst updateUser = createAsyncThunk<\n  // Return type of the payload creator\n  MyData,\n  // First argument to the payload creator\n  UserAttributes,\n  // Types for ThunkAPI\n  {\n    extra: {\n      jwt: string\n    }\n    rejectValue: MyKnownError\n  }\n>('users/update', async (user, thunkApi) => {\n  const { id, ...userData } = user\n  const response = await fetch(`https://reqres.in/api/users/${id}`, {\n    method: 'PUT',\n    headers: {\n      Authorization: `Bearer ${thunkApi.extra.jwt}`,\n    },\n    body: JSON.stringify(userData),\n  })\n  if (response.status === 400) {\n    // Return the known error for future handling\n    return thunkApi.rejectWithValue((await response.json()) as MyKnownError)\n  }\n  return (await response.json()) as MyData\n})\n")),Object(i.b)("p",null,"While this notation for ",Object(i.b)("inlineCode",{parentName:"p"},"state"),", ",Object(i.b)("inlineCode",{parentName:"p"},"dispatch"),", ",Object(i.b)("inlineCode",{parentName:"p"},"extra")," and ",Object(i.b)("inlineCode",{parentName:"p"},"rejectValue")," might seem uncommon at first, it allows you to provide only the types for these you actually need - so for example, if you are not accessing ",Object(i.b)("inlineCode",{parentName:"p"},"getState")," within your ",Object(i.b)("inlineCode",{parentName:"p"},"payloadCreator"),", there is no need to provide a type for ",Object(i.b)("inlineCode",{parentName:"p"},"state"),". The same can be said about ",Object(i.b)("inlineCode",{parentName:"p"},"rejectValue")," - if you don't need to access any potential error payload, you can ignore it."),Object(i.b)("p",null,"In addition, you can leverage checks against ",Object(i.b)("inlineCode",{parentName:"p"},"action.payload")," and ",Object(i.b)("inlineCode",{parentName:"p"},"match")," as provided by ",Object(i.b)("inlineCode",{parentName:"p"},"createAction")," as a type-guard for when you want to access known properties on defined types. Example:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"In a reducer")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"const usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    entities: {},\n    error: null,\n  },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(updateUser.fulfilled, (state, { payload }) => {\n      state.entities[payload.id] = payload\n    })\n    builder.addCase(updateUser.rejected, (state, action) => {\n      if (action.payload) {\n        // Since we passed in `MyKnownError` to `rejectValue` in `updateUser`, the type information will be available here.\n        state.error = action.payload.errorMessage\n      } else {\n        state.error = action.error\n      }\n    })\n  },\n})\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"In a component")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"const handleUpdateUser = async (userData) => {\n  const resultAction = await dispatch(updateUser(userData))\n  if (updateUser.fulfilled.match(resultAction)) {\n    const user = resultAction.payload\n    showToast('success', `Updated ${user.name}`)\n  } else {\n    if (resultAction.payload) {\n      // Since we passed in `MyKnownError` to `rejectValue` in `updateUser`, the type information will be available here.\n      // Note: this would also be a good place to do any handling that relies on the `rejectedWithValue` payload, such as setting field errors\n      showToast('error', `Update failed: ${resultAction.payload.errorMessage}`)\n    } else {\n      showToast('error', `Update failed: ${resultAction.error.message}`)\n    }\n  }\n}\n")),Object(i.b)("h2",{id:"createentityadapter"},Object(i.b)("inlineCode",{parentName:"h2"},"createEntityAdapter")),Object(i.b)("p",null,"Typing ",Object(i.b)("inlineCode",{parentName:"p"},"createEntityAdapter")," only requires you to specify the entity type as the single generic argument."),Object(i.b)("p",null,"The example from the ",Object(i.b)("inlineCode",{parentName:"p"},"createEntityAdapter")," documentation would look like this in TypeScript:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"interface Book {\n  bookId: number\n  title: string\n  // ...\n}\n\n// highlight-next-line\nconst booksAdapter = createEntityAdapter<Book>({\n  selectId: (book) => book.bookId,\n  sortComparer: (a, b) => a.title.localeCompare(b.title),\n})\n\nconst booksSlice = createSlice({\n  name: 'books',\n  initialState: booksAdapter.getInitialState(),\n  reducers: {\n    bookAdded: booksAdapter.addOne,\n    booksReceived(state, action: PayloadAction<{ books: Book[] }>) {\n      booksAdapter.setAll(state, action.payload.books)\n    },\n  },\n})\n")),Object(i.b)("h3",{id:"using-createentityadapter-with-normalizr"},"Using ",Object(i.b)("inlineCode",{parentName:"h3"},"createEntityAdapter")," with ",Object(i.b)("inlineCode",{parentName:"h3"},"normalizr")),Object(i.b)("p",null,"When using a library like ",Object(i.b)("a",{parentName:"p",href:"https://github.com/paularmstrong/normalizr/"},Object(i.b)("inlineCode",{parentName:"a"},"normalizr")),", your normalized data will resemble this shape:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"{\n  result: 1,\n  entities: {\n    1: { id: 1, other: 'property' },\n    2: { id: 2, other: 'property' }\n  }\n}\n")),Object(i.b)("p",null,"The methods ",Object(i.b)("inlineCode",{parentName:"p"},"addMany"),", ",Object(i.b)("inlineCode",{parentName:"p"},"upsertMany"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"setAll")," all allow you to pass in the ",Object(i.b)("inlineCode",{parentName:"p"},"entities")," portion of this directly with no extra conversion steps. However, the ",Object(i.b)("inlineCode",{parentName:"p"},"normalizr")," TS typings currently do not correctly reflect that multiple data types may be included in the results, so you will need to specify that type structure yourself."),Object(i.b)("p",null,"Here is an example of how that would look:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"type Author = { id: number; name: string }\ntype Article = { id: number; title: string }\ntype Comment = { id: number; commenter: number }\n\nexport const fetchArticle = createAsyncThunk(\n  'articles/fetchArticle',\n  async (id: number) => {\n    const data = await fakeAPI.articles.show(id)\n    // Normalize the data so reducers can responded to a predictable payload.\n    // Note: at the time of writing, normalizr does not automatically infer the result,\n    // so we explicitly declare the shape of the returned normalized data as a generic arg.\n    const normalized = normalize<\n      any,\n      {\n        articles: { [key: string]: Article }\n        users: { [key: string]: Author }\n        comments: { [key: string]: Comment }\n      }\n    >(data, articleEntity)\n    return normalized.entities\n  }\n)\n\nexport const slice = createSlice({\n  name: 'articles',\n  initialState: articlesAdapter.getInitialState(),\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchArticle.fulfilled, (state, action) => {\n      // The type signature on action.payload matches what we passed into the generic for `normalize`, allowing us to access specific properties on `payload.articles` if desired\n      articlesAdapter.upsertMany(state, action.payload.articles)\n    })\n  },\n})\n")))}p.isMDXComponent=!0}}]);